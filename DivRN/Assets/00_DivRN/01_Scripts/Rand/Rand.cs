/*==========================================================================*/
/*==========================================================================*/
/*!
	@file	Rand.cs
	@brief	乱数生成クラス
	@author Developer
	@date 	2012/10/08

	再現可能な乱数の生成に特化。
	ランダムマップ等を想定。
	実装はXorshiftのアルゴリズムを使った実装となっています。
*/
/*==========================================================================*/
/*==========================================================================*/
/*==========================================================================*/
/*		Using																*/
/*==========================================================================*/
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;

/*==========================================================================*/
/*		namespace Begin 													*/
/*==========================================================================*/
/*==========================================================================*/
/*		define																*/
/*==========================================================================*/
/*==========================================================================*/
/*		macro																*/
/*==========================================================================*/
/*==========================================================================*/
/*		class																*/
/*==========================================================================*/
//----------------------------------------------------------------------------
/*!
	@brief	乱数生成クラス
*/
//----------------------------------------------------------------------------
public class Rand
{
    /*==========================================================================*/
    /*		var																	*/
    /*==========================================================================*/
    private uint m_RandSeed;            //!< 乱数シード

    private uint m_RandValueX;      //!< 乱数パラメータ：
    private uint m_RandValueY;      //!< 乱数パラメータ：
    private uint m_RandValueZ;      //!< 乱数パラメータ：
    private uint m_RandValueW;      //!< 乱数パラメータ：

    /*==========================================================================*/
    /*		func																*/
    /*==========================================================================*/
    //----------------------------------------------------------------------------
    /*!
		@brief	コンストラクタ
	*/
    //----------------------------------------------------------------------------
    public Rand()
    {
        //-------------------------------
        // 適当な値で初期化。
        // ここの数値に意味は無い。
        // 
        // 再現可能な乱数を期待する場合には
        // 外部的に乱数シードを入れる関数を呼び出すことを想定する。
        //-------------------------------
        SetRandSeed((uint)(TimeUtil.ConvertLocalTimeToServerTime(DateTime.Now) % 0xffffffff));
    }


    //----------------------------------------------------------------------------
    /*!
		@brief	乱数シード設定
	*/
    //----------------------------------------------------------------------------
    public void SetRandSeed(uint nSeed)
    {
        m_RandValueX = 123456789;
        m_RandValueY = 362436069;
        m_RandValueZ = 521288629;
        m_RandValueW = nSeed;

        m_RandSeed = nSeed;
    }

    //----------------------------------------------------------------------------
    /*!
		@brief	乱数シード取得
	*/
    //----------------------------------------------------------------------------
    public uint GetRandSeed()
    {
        return m_RandSeed;
    }

    //----------------------------------------------------------------------------
    /*!
		@brief	乱数取得
	*/
    //----------------------------------------------------------------------------
    public uint GetRand()
    {
        uint t = m_RandValueX ^ (m_RandValueX << 11);

        m_RandValueX = m_RandValueY;
        m_RandValueY = m_RandValueZ;
        m_RandValueZ = m_RandValueW;
        m_RandValueW = (m_RandValueW ^ (m_RandValueW >> 19)) ^ (t ^ (t >> 8));
        return m_RandValueW;
    }
    //----------------------------------------------------------------------------
    /*!
		@brief	乱数取得
	*/
    //----------------------------------------------------------------------------
    public uint GetRand(uint nMin, uint nMax)
    {
        if (nMax <= nMin)
        {
            return nMin;
        }

        return (GetRand() % (nMax - nMin) + nMin);
    }
}

