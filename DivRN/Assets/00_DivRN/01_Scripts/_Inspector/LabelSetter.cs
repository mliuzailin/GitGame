/*==========================================================================*/
/*==========================================================================*/
/*!
	@file	LabelSetter.cs
	@brief	UILabelに対する操作クラス
	@note	
	@author Developer
	@date 	2013/07/05
*/
/*==========================================================================*/
/*==========================================================================*/
/*==========================================================================*/
/*		Using																*/
/*==========================================================================*/
using UnityEngine;
using UnityEngine.UI;
using System;
using System.Collections;
using System.Collections.Generic;

/*==========================================================================*/
/*		namespace Begin 													*/
/*==========================================================================*/
/*==========================================================================*/
/*		define																*/
/*==========================================================================*/
/*==========================================================================*/
/*		macro																*/
/*==========================================================================*/
/*==========================================================================*/
/*		class																*/
/*==========================================================================*/
//----------------------------------------------------------------------------
/*!
	@brief	UILabelに対する操作クラス
*/
//----------------------------------------------------------------------------
public class LabelSetter : MonoBehaviour
{
    /*==========================================================================*/
    /*		var																	*/
    /*==========================================================================*/
    public APP_COLOR m_LabelColor = APP_COLOR.LABEL_WHITE;
    public string m_LabelTextKey = "";

    protected Text m_WorkUILabel;
    private bool m_WorkTextTry;

    /*==========================================================================*/
    /*		func																*/
    /*==========================================================================*/
    //----------------------------------------------------------------------------
    /*!
		@brief	Unity固有処理：初期化処理	※インスタンス生成時呼出し
	*/
    //----------------------------------------------------------------------------
    protected virtual void Awake()
    {

    }
    //----------------------------------------------------------------------------
    /*!
		@brief	Unity固有処理：初期化処理	※初回のUpdateを呼び出す直前に呼出し
	*/
    //----------------------------------------------------------------------------
    protected virtual void Start()
    {
        m_WorkUILabel = gameObject.GetComponent<Text>();
        if (m_WorkUILabel != null)
        {
            m_WorkUILabel.color = ColorUtil.GetColor(m_LabelColor);
        }
    }

    //----------------------------------------------------------------------------
    /*!
		@brief	Unity固有処理：更新処理	※定期処理
	*/
    //----------------------------------------------------------------------------
    public void Update()
    {
        //--------------------------------
        // 
        //--------------------------------
        if (m_WorkTextTry == false)
        {
            m_WorkTextTry = true;

            //--------------------------------
            // キーが指定されている場合のみ文字列置き換えを実行
            //--------------------------------
            if (m_LabelTextKey.Length > 0)
            {
                //--------------------------------
                // キーに対応付いた文字列を取得
                //--------------------------------
                string strLabelMsg = "";
                bool bRet = UnityUtil.GetTextTry(m_LabelTextKey, ref strLabelMsg);
                if (bRet == true)
                {
                    //--------------------------------
                    // キーに対応付いた文字列を取得して表示反映。
                    //
                    // このコンポーネントの付いたオブジェクトが非アクティブだった場合に
                    // この処理が走る前に外部からテキストが指定されているケースもあり得る。
                    // 
                    // UILabelの更新回数が0回の場合に限定して処理を行う
                    //--------------------------------
                    if (m_WorkUILabel != null
                    //						&&	m_WorkUILabel.mChangeNum == 0
                    )
                    {
                        m_WorkUILabel.text = strLabelMsg;
                    }
                    /*
                                        else
                                        {
                                            string strErrorObjectPath = "";
                                            GetObjDir( gameObject , ref strErrorObjectPath );
                                            Debug.LogError( "LabelSetter Text Already Set! - " + strErrorObjectPath );
                                        }
                    */
                }
                else
                {
                    string strErrorObjectPath = "";
                    GetObjDir(gameObject, ref strErrorObjectPath);
                    Debug.LogError("LabelSetter Error! - " + strErrorObjectPath);

                    if (m_WorkUILabel != null)
                    {
                        m_WorkUILabel.text = "???????";
                    }
                }
            }

            DestroyImmediate(this);
        }
    }

    //----------------------------------------------------------------------------
    /*!
		@brief	
	*/
    //----------------------------------------------------------------------------
    private void GetObjDir(GameObject cObj, ref string strGetDir)
    {
        if (cObj == null)
        {
            return;
        }

        strGetDir = cObj.name + strGetDir;

        if (cObj.transform.parent != null)
        {
            strGetDir = "/" + strGetDir;
            GetObjDir(cObj.transform.parent.gameObject, ref strGetDir);
        }
    }

}

