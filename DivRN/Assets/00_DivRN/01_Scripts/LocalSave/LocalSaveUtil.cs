/*==========================================================================*/
/*==========================================================================*/
/*!
	@file	SaverDataUtil.cs
	@brief	ローカルセーブユーティリティ
	@author Developer
	@date 	2012/11/28
*/
/*==========================================================================*/
/*==========================================================================*/
/*==========================================================================*/
/*		Using																*/
/*==========================================================================*/
using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;

/*==========================================================================*/
/*		namespace Begin 													*/
/*==========================================================================*/
/*==========================================================================*/
/*		define																*/
/*==========================================================================*/
/*==========================================================================*/
/*		macro																*/
/*==========================================================================*/
/*==========================================================================*/
/*		class																*/
/*==========================================================================*/
//----------------------------------------------------------------------------
/*!
	@brief	ローカルセーブユーティリティ
*/
//----------------------------------------------------------------------------
static public class LocalSaveUtil
{
    /*==========================================================================*/
    /*		var																	*/
    /*==========================================================================*/

    /*==========================================================================*/
    /*		func																*/
    /*==========================================================================*/
    //----------------------------------------------------------------------------
    /*!
		@brief	セーブ操作：セーブデータロード
		@note	※ PlayerPrefs を使用している場合、ロード処理は必要ないらしい
	*/
    //----------------------------------------------------------------------------
    static public void ExecDataLoad()
    {
#if BUILD_TYPE_DEBUG
        Debug.Log(">Call LocalSaveUtil Load()");
#endif
    }

    //----------------------------------------------------------------------------
    /*!
		@brief	セーブ操作：セーブデータ破棄
	*/
    //----------------------------------------------------------------------------
    static public void ExecDataRemove(string strKey)
    {
#if BUILD_TYPE_DEBUG
        Debug.Log(">Call LocalSaveUtil Delete ... " + strKey);
#endif
        PlayerPrefs.DeleteKey(strKey);
    }

    //----------------------------------------------------------------------------
    /*!
		@brief	セーブ操作：セーブデータ破棄
	*/
    //----------------------------------------------------------------------------
    static public void ExecDataDelete()
    {
#if BUILD_TYPE_DEBUG
        Debug.Log(">Call LocalSaveUtil Delete()");
#endif
        PlayerPrefs.DeleteAll();


        //----------------------------------------
        // 破棄後にセーブデータバージョンが消滅する。
        // これが消滅したままほっておくと、
        // 次の起動時にResidentManagerの生成タイミングで全セーブデータが破棄される。
        //
        // ちゃんと今の起動状態からセーブされるように、
        // 安全策のためセーブデータのセーフティを噛ませておく
        //----------------------------------------
        LocalSaveManager.SaveVersionSafety();

    }

    //----------------------------------------------------------------------------
    /*!
		@brief	セーブ操作：セーブデータ上書き
	*/
    //----------------------------------------------------------------------------
    static public void ExecDataSave()
    {
#if UNITY_EDITOR && DEBUG_LOG
		Debug.Log(">Call LocalSaveUtil Save()");
#endif // UNITY_EDITOR
        PlayerPrefs.Save();
    }

    //----------------------------------------------------------------------------
    /*!
		@brief	要素追加：bool型
	*/
    //----------------------------------------------------------------------------
    static public void SetValueBool(string strKey, bool bValue)
    {
        PlayerPrefs.SetInt(strKey, (bValue == true ? 1 : 0));
    }

    //----------------------------------------------------------------------------
    /*!
		@brief	要素追加：int型
	*/
    //----------------------------------------------------------------------------
    static public void SetValueInt(string strKey, int nValue)
    {
        PlayerPrefs.SetInt(strKey, nValue);
    }

    //----------------------------------------------------------------------------
    /*!
		@brief	要素追加：float型
	*/
    //----------------------------------------------------------------------------
    static public void SetValueFloat(string strKey, float fValue)
    {
        PlayerPrefs.SetFloat(strKey, fValue);
    }

    //----------------------------------------------------------------------------
    /*!
		@brief	要素追加：文字列型
	*/
    //----------------------------------------------------------------------------
    static public void SetValueString(string strKey, string strValue)
    {
        PlayerPrefs.SetString(strKey, strValue);
    }

    //----------------------------------------------------------------------------
    /*!
		@brief	要素取得：bool型
	*/
    //----------------------------------------------------------------------------
    static public bool GetValueBool(string strKey, bool bSafeValue)
    {
        if (PlayerPrefs.HasKey(strKey))
        {
            return PlayerPrefs.GetInt(strKey) == 1 ? true : false;
        }
        return bSafeValue;
    }

    //----------------------------------------------------------------------------
    /*!
		@brief	要素取得：int型
	*/
    //----------------------------------------------------------------------------
    static public int GetValueInt(string strKey, int nSafeValue)
    {
        if (PlayerPrefs.HasKey(strKey))
        {
            return PlayerPrefs.GetInt(strKey);
        }
        else
        {
#if BUILD_TYPE_DEBUG
            //			Debug.Log(">PlayerPrefs / " + strKey + " is not found.");
#endif
            return nSafeValue;
        }
    }

    //----------------------------------------------------------------------------
    /*!
		@brief	要素取得：float型
	*/
    //----------------------------------------------------------------------------
    static public float GetValueFloat(string strKey, float fSafeValue)
    {
        if (PlayerPrefs.HasKey(strKey))
        {
            return PlayerPrefs.GetFloat(strKey);
        }
        return fSafeValue;
    }

    //----------------------------------------------------------------------------
    /*!
		@brief	要素取得：文字列型
	*/
    //----------------------------------------------------------------------------
    static public string GetValueString(string strKey, string strSafeValue)
    {
        if (PlayerPrefs.HasKey(strKey))
        {
            return PlayerPrefs.GetString(strKey);
        }
        return strSafeValue;
    }

}

/*==========================================================================*/
/*		namespace End 														*/
/*==========================================================================*/

